name: Build, Test, Push (Java 11)

on:
  push:
    branches:
      - ISIS-2975
  pull_request:
    branches:
      - master

jobs:
  build:
    name: build-local-push
    runs-on: ubuntu-latest
    env:
      # to be shared among all steps of this job
      BASELINE: 2.0.0-M7
      PROJECT_ROOT_PATH: ${{ github.workspace }}
      CI_SCRIPTS_PATH: ${{ github.workspace }}/scripts/ci

      # not used, would be nice if we could transform the TIMESTAMP string into the REVISION
      # variable here, but it seems github not yet has any string expression manipulation
      # operators other than concatenation
      TIMESTAMP: ${{ github.event.head_commit.timestamp }}

      # set this to 'deploy' when intent is to push the built packages to a repo
      # requires 'secrets' which we don't have yet
      MVN_STAGES: deploy

    steps:
#    - uses: actions/checkout@v3
#
#    - name: Set up JDK 11
#      uses: actions/setup-java@v2
#      with:
#        distribution: 'zulu'
#        java-version: 11
#
#    - name: Print Maven Version
#      run: mvn --version
#
#    - name: Print jq Version
#      run: jq --version

    - name: Find baseline from search.maven.org
      id: baseline
      run: 'curl -k "https://search.maven.org/solrsearch/select?q=g:org.apache.isis.core+AND+a:isis-applib&rows=1&wt=json" | jq -r ".response.docs[0].latestVersion" '

    - name: Show baseline
      run: 'echo "baseline ${{ steps.baseline.outputs.value }}"'

#
#    - name: Print Maven Version
#      run: mvn --version
#
#    - name: Activate Cache for Maven Downloads
#      uses: actions/cache@v2.1.7
#      env:
#        # change the cache-name if we want to rebuild the cache
#        # currently there is no concept of cache clearing
#        cache-name: maven-2021-08
#      with:
#        path: ~/.m2/repository
#        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
#        restore-keys: |
#          ${{ runner.os }}-${{ env.cache-name }}-
#          ${{ runner.os }}-
#
#    - name: Calculate new $REVISION (if changed since last published, else skip)
#      id: revision
#      shell: bash
#      run: bash scripts/ci/calc-revision.sh
#
#    - name: Share $REVISION as Environment Variable
#      run: echo "REVISION=${{ steps.revision.outputs.revision }}" >> $GITHUB_ENV
#
#    - name: Setup Script Environment
#      shell: bash
#      run: |
#        echo ==============  ENV  =================
#        echo BASELINE         \: $BASELINE
#        echo TIMESTAMP        \: $TIMESTAMP
#        echo PROJECT_ROOT_PATH\: $PROJECT_ROOT_PATH
#        echo CI_SCRIPTS_PATH  \: $CI_SCRIPTS_PATH
#        echo REVISION         \: $REVISION
#        echo ======================================
#
#  - name: Create GitHub Release
#    uses: actions/create-release@v1
#    env:
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    with:
#      tag_name: ${{ env.REVISION }}
#      release_name: Release ${{ env.REVISION }}
#
#  - name: Build Artifacts
#      shell: bash
#      run: bash scripts/ci/build-artifacts.sh
#      env:
#        # -Dreleased ... build only the released modules
#        # -Denforcer.failFast=true ... fail fast on convergence issues (enforcer plugin)
#        # -Dmaven.source.skip=true ... no need for the CI build to pull sources
#        # -Djacoco.skip=true ... no need for the CI build to add test coverage reports
#        # -T 1C ... 1 build thread per core
#        MVN_ADDITIONAL_OPTS: >-
#          -Dmodule-essential
#          -Dproject.build.outputTimestamp=1
#          -Denforcer.failFast=true
#          -Djacoco.skip=true
#          -DskipTests
#          -T 1C
#        GITHUB_TOKEN: ${{ github.token }}

# FOR DEBUG USE
#   - name: Dump GitHub context
#     env:
#       ENV_CONTEXT: ${{ toJson(env) }}
#     run: echo "$ENV_CONTEXT"
#   - name: Dump GitHub context
#     env:
#       GITHUB_CONTEXT: ${{ toJson(github) }}
#     run: echo "$GITHUB_CONTEXT"
#   - name: Dump job context
#     env:
#       JOB_CONTEXT: ${{ toJson(job) }}
#     run: echo "$JOB_CONTEXT"
#   - name: Dump steps context
#     env:
#       STEPS_CONTEXT: ${{ toJson(steps) }}
#     run: echo "$STEPS_CONTEXT"
#   - name: Dump runner context
#     env:
#       RUNNER_CONTEXT: ${{ toJson(runner) }}
#     run: echo "$RUNNER_CONTEXT"
#   - name: Dump strategy context
#     env:
#       STRATEGY_CONTEXT: ${{ toJson(strategy) }}
#     run: echo "$STRATEGY_CONTEXT"
#   - name: Dump matrix context
#     env:
#       MATRIX_CONTEXT: ${{ toJson(matrix) }}
#     run: echo "$MATRIX_CONTEXT"

